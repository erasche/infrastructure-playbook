#jinja2: lstrip_blocks: True
//
// This file is managed by Ansible.  ALL CHANGES WILL BE OVERWRITTEN.
//

{% for view in dns_bind_views | default([]) %}
/* "{{ view.name }}" view */
view "{{ view.name }}" {
    {% if 'match_clients' in view %}
    match-clients {
    {% for match_client in view.match_clients %}
        {{ match_client }};
    {% endfor %}
    };
    {% endif %}
    recursion {{ 'yes' if view.recursion is defined and view.recursion else 'no' }};
    allow-recursion { {{ 'any' if view.recursion is defined and view.recursion else 'none' }}; };
    {% if view.also_notify is defined %}
    also-notify {
        {% for notify in view.also_notify %}
        {{ notify }};
        {% endfor %}
    };
    {% endif %}

    /* includes */
    {% for include in view.includes | default([]) %}
    include "{{ include }}";
    {% endfor %}

    /* zones */
    {% for zone in view.zones | default([]) %}
    {#- the filters on zone.file are still executed (on AnsibleUndefined) even if zone.name is defined, why Ansible? #}
    {%- set zone_name = zone.name | default(zone.file | default('') | basename | splitext | first) %}
    {%- set zone_type = zone.type | default(view.zone_defaults.type | default("master")) %}
    {%- set zone_file = zone.file | default((zone_type == 'slave') | ternary('db.' ~ zone_name, zone_name ~ '.zone')) %}
    {%- set zone_masters = zone.masters | default(view.zone_defaults.masters | default([])) %}
    zone "{{ zone_name }}" {{ zone.class | default("IN") }} {
        type {{ zone_type }};
        file "{{ (zone_type == 'slave') | ternary(dns_bind_slave_zones_dir ~ '/' ~ view.name, dns_bind_zones_dir) }}/{{ zone_file }}";
        {% if zone_type == "slave" and zone_masters | length > 0 %}
        masters {
        {% for master in zone_masters %}
            {{ master }};
        {% endfor %}
        };
        {% endif %}
    };
    {% endfor %}
};
{% endfor %}
